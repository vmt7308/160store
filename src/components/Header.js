import React, { useState, useEffect, useRef } from "react";
import { Link, useNavigate } from "react-router-dom";
import axios from "axios";
import logo from "../assets/img/logo.png";
import "../assets/css/Header.css";
import "../assets/font/font-awesome-pro-v6-6.2.0//css/all.min.css";

function Header({ scrollToSection }) {
  // Header lu√¥n lu√¥n hi·ªÉn th·ªã
  const [isScrolled, setIsScrolled] = useState(false);

  // State cho t√¨m ki·∫øm
  const [searchKeyword, setSearchKeyword] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [showSearchResults, setShowSearchResults] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [priceRange, setPriceRange] = useState({ min: "", max: "" });
  const [showAdvancedSearch, setShowAdvancedSearch] = useState(false);

  // State l∆∞u danh m·ª•c s·∫£n ph·∫©m
  const [loading, setLoading] = useState(true);

  // Debounce t√¨m ki·∫øm ƒë·ªÉ tr√°nh g·ªçi API qu√° nhi·ªÅu l·∫ßn
  const searchTimeoutRef = useRef(null);

  // Ref cho dropdown t√¨m ki·∫øm ƒë·ªÉ x·ª≠ l√Ω click outside
  const searchResultsRef = useRef(null);
  
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 50);
    };

    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  // Fetch danh m·ª•c s·∫£n ph·∫©m t·ª´ API
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/categories");
        setCategories(response.data);
      } catch (error) {
        console.error("L·ªói khi t·∫£i danh m·ª•c:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchCategories();
  }, []);

  // X·ª≠ l√Ω t√¨m ki·∫øm khi ng∆∞·ªùi d√πng nh·∫≠p
  useEffect(() => {
    // Clear timeout c≈© n·∫øu c√≥
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }

    // N·∫øu t·ª´ kh√≥a tr·ªëng, ·∫©n k·∫øt qu·∫£
    if (!searchKeyword.trim()) {
      setSearchResults([]);
      setShowSearchResults(false);
      return;
    }

    // Set timeout m·ªõi ƒë·ªÉ debounce
    searchTimeoutRef.current = setTimeout(async () => {
      setIsSearching(true);
      try {
        // T·∫°o tham s·ªë query
        const params = new URLSearchParams();
        params.append('keyword', searchKeyword);
        
        if (selectedCategory) {
          params.append('categoryId', selectedCategory);
        }
        
        if (priceRange.min) {
          params.append('minPrice', priceRange.min);
        }
        
        if (priceRange.max) {
          params.append('maxPrice', priceRange.max);
        }

        const response = await axios.get(`http://localhost:5000/api/products/search?${params.toString()}`);
        setSearchResults(response.data);
        setShowSearchResults(true);
      } catch (error) {
        console.error("L·ªói khi t√¨m ki·∫øm:", error);
      } finally {
        setIsSearching(false);
      }
    }, 500); // Delay 500ms

    // Cleanup function
    return () => {
      if (searchTimeoutRef.current) {
        clearTimeout(searchTimeoutRef.current);
      }
    };
  }, [searchKeyword, selectedCategory, priceRange.min, priceRange.max]);

  // X·ª≠ l√Ω click outside ƒë·ªÉ ·∫©n k·∫øt qu·∫£ t√¨m ki·∫øm
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (searchResultsRef.current && !searchResultsRef.current.contains(event.target)) {
        setShowSearchResults(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Handle khi reset t√¨m ki·∫øm
  const resetSearch = () => {
    setSearchKeyword("");
    setSelectedCategory(null);
    setPriceRange({ min: "", max: "" });
    setSearchResults([]);
    setShowSearchResults(false);
    setShowAdvancedSearch(false);
  };

  // Handle advanced search toggle
  const toggleAdvancedSearch = () => {
    setShowAdvancedSearch(!showAdvancedSearch);
  };

  // Handle submit t√¨m ki·∫øm
  const handleSearchSubmit = (e) => {
    e.preventDefault();
    if (searchKeyword.trim()) {
      // Th·ª±c hi·ªán t√¨m ki·∫øm ngay l·∫≠p t·ª©c
      searchProducts();
    }
  };

  // H√†m t√¨m ki·∫øm
  const searchProducts = async () => {
    if (!searchKeyword.trim()) return;

    setIsSearching(true);
    try {
      const params = new URLSearchParams();
      params.append('keyword', searchKeyword);
      
      if (selectedCategory) {
        params.append('categoryId', selectedCategory);
      }
      
      if (priceRange.min) {
        params.append('minPrice', priceRange.min);
      }
      
      if (priceRange.max) {
        params.append('maxPrice', priceRange.max);
      }

      const response = await axios.get(`http://localhost:5000/api/products/search?${params.toString()}`);
      setSearchResults(response.data);
      setShowSearchResults(true);
    } catch (error) {
      console.error("L·ªói khi t√¨m ki·∫øm:", error);
    } finally {
      setIsSearching(false);
    }
  };

  // Chuy·ªÉn v·ªÅ trang chi ti·∫øt s·∫£n ph·∫©m khi click v√†o s·∫£n ph·∫©m
  const navigate = useNavigate();
  const goToProductDetail = (productId) => {
    navigate(`/product/${productId}`);
    setShowSearchResults(false);
  };

  // Nh·∫≠n prop scrollToSection t·ª´ Home.js
  const [showLogin, setShowLogin] = useState(false);
  const [showCart, setShowCart] = useState(false);

  // ƒê√≥ng popup khi click b√™n ngo√†i
  const closePopup = () => {
    setShowLogin(false);
    setShowCart(false);
  };

  // Ch·ª©c nƒÉng popup ƒëƒÉng nh·∫≠p
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  const handleLogin = async () => {
    setError("");
    try {
      const response = await axios.post(
        "http://localhost:5000/api/auth/login",
        {
          email,
          password,
        }
      );
      localStorage.setItem("token", response.data.token);
      localStorage.setItem("user", JSON.stringify(response.data.user));
      closePopup();
    } catch (err) {
      setError(err.response?.data?.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Th·ª≠ l·∫°i!");
    }
  };

  // T·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi t√™n danh m·ª•c th√†nh ID h·ª£p l·ªá
  const getCategorySectionId = (categoryName) => {
    return categoryName
      .toLowerCase()
      .replace(/ /g, "-") // Thay d·∫•u c√°ch b·∫±ng "-"
      .replace(/[^\w-]+/g, ""); // X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát
  };

  // Format gi√° ti·ªÅn
  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' })
      .format(price)
      .replace('‚Ç´', 'ƒë');
  };

  return (
    <header className={`header-container ${isScrolled ? "scrolled" : ""}`}>
      {/* VOUCHER ch·∫°y t·ª´ ph·∫£i sang tr√°i */}
      <div className="voucher-container">
        <div className="voucher-scroll">
          <span>VOUCHER 10% T·ªêI ƒêA 10K</span>
          <span>VOUCHER 50K ƒê∆†N T·ª™ 699K</span>
          <span>VOUCHER 80K ƒê∆†N T·ª™ 999K</span>
          <span>üöõ FREESHIP ƒê∆†N T·ª™ 399K</span>
        </div>
      </div>

      {/* Thanh header ch√≠nh */}
      <div className="header-main">
        {/* Logo */}
        <Link to="/" className="logo">
          <img src={logo} alt="160Store" />
        </Link>

        {/* Thanh t√¨m ki·∫øm */}
        <div className="search-container" ref={searchResultsRef}>
          <form onSubmit={handleSearchSubmit} className="search-form">
            <div className="search-bar">
              <input 
                type="text" 
                placeholder="B·∫°n ƒëang t√¨m g√¨..." 
                value={searchKeyword}
                onChange={(e) => setSearchKeyword(e.target.value)}
                onFocus={() => {
                  if (searchResults.length > 0) {
                    setShowSearchResults(true);
                  }
                }}
              />
              {searchKeyword && (
                <button type="button" className="clear-search" onClick={resetSearch}>
                  <i className="fa-solid fa-times"></i>
                </button>
              )}
              <button type="button" className="advanced-search-toggle" onClick={toggleAdvancedSearch}>
                <i className={`fa-solid ${showAdvancedSearch ? 'fa-chevron-up' : 'fa-sliders'}`}></i>
              </button>
              <button type="submit">
                {isSearching ? (
                  <i className="fa-solid fa-spinner fa-spin"></i>
                ) : (
                  <i className="fa-solid fa-magnifying-glass"></i>
                )}
              </button>
            </div>
            
            {/* Advanced Search */}
            {showAdvancedSearch && (
              <div className="advanced-search">
                <div className="search-filter">
                  <div className="filter-section">
                    <label>Danh m·ª•c:</label>
                    <select 
                      value={selectedCategory || ''} 
                      onChange={(e) => setSelectedCategory(e.target.value ? Number(e.target.value) : null)}
                    >
                      <option value="">T·∫•t c·∫£ danh m·ª•c</option>
                      {categories.map(cat => (
                        <option key={cat.CategoryID} value={cat.CategoryID}>
                          {cat.CategoryName}
                        </option>
                      ))}
                    </select>
                  </div>
                  <div className="filter-section price-range">
                    <label>Kho·∫£ng gi√°:</label>
                    <div className="price-inputs">
                      <input
                        type="number"
                        placeholder="T·ª´"
                        value={priceRange.min}
                        onChange={(e) => setPriceRange({...priceRange, min: e.target.value})}
                      />
                      <span>-</span>
                      <input
                        type="number"
                        placeholder="ƒê·∫øn"
                        value={priceRange.max}
                        onChange={(e) => setPriceRange({...priceRange, max: e.target.value})}
                      />
                    </div>
                  </div>
                </div>
                <div className="filter-actions">
                  <button type="button" className="reset-filters" onClick={resetSearch}>
                    X√≥a b·ªô l·ªçc
                  </button>
                  <button type="submit" className="apply-filters">
                    √Åp d·ª•ng
                  </button>
                </div>
              </div>
            )}
          </form>

          {/* K·∫øt qu·∫£ t√¨m ki·∫øm */}
          {showSearchResults && searchResults.length > 0 && (
            <div className="search-results">
              <h3>K·∫øt qu·∫£ t√¨m ki·∫øm ({searchResults.length})</h3>
              <ul>
                {searchResults.map((product) => (
                  <li key={product.ProductID} onClick={() => goToProductDetail(product.ProductID)}>
                    <div className="product-image">
                      <img src={product.imageUrl} alt={product.ProductName} />
                    </div>
                    <div className="product-info">
                      <h4>{product.ProductName}</h4>
                      <p className="product-price">{formatPrice(product.Price)}</p>
                    </div>
                  </li>
                ))}
              </ul>
              <div className="view-all-results">
                <Link to={`/search?keyword=${encodeURIComponent(searchKeyword)}`}>
                  Xem t·∫•t c·∫£ k·∫øt qu·∫£
                </Link>
              </div>
            </div>
          )}

          {/* Kh√¥ng c√≥ k·∫øt qu·∫£ */}
          {showSearchResults && searchKeyword && searchResults.length === 0 && !isSearching && (
            <div className="search-results no-results">
              <p>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p!</p>
            </div>
          )}
        </div>

        {/* Icon ƒëi·ªÅu h∆∞·ªõng */}
        <div className="header-icons header-buttons">
          <Link to="/stores">
            <i className="fa-light fa-map-location-dot"></i>
            <p>C·ª≠a h√†ng</p>
          </Link>
          <button
            className="header-btn"
            onClick={() => setShowLogin(!showLogin)}
          >
            <i className="fa-light fa-user"></i>
            ƒêƒÉng nh·∫≠p
          </button>
          <button
            onClick={() => setShowCart(!showCart)}
            className="cart-button header-btn"
          >
            <i className="fa-light fa-cart-shopping"></i>
            <span className="cart-badge">0</span>
            Gi·ªè h√†ng
          </button>
        </div>
      </div>

      {/* Menu danh m·ª•c s·∫£n ph·∫©m c√≥ thanh cu·ªôn ngang n·∫øu danh m·ª•c qu√° nhi·ªÅu */}
      <nav className="nav-menu">
        <ul className="category-list">
          {loading ? (
            <li>ƒêang t·∫£i danh m·ª•c...</li>
          ) : (
            categories.map((category, index) => (
              <li key={category.CategoryID}>
                <div className="menu-item">
                  {category.CategoryID === 1 && <span className="badge">New</span>}
                  <Link onClick={() => scrollToSection(getCategorySectionId(category.CategoryName))}>
                    {category.CategoryName}
                  </Link>
                  <span className="underline"></span>
                </div>
              </li>
            ))
          )}
        </ul>
      </nav>

      {/* L·ªõp ph·ªß m·ªù khi hi·ªÉn th·ªã popup */}
      {(showLogin || showCart) && (
        <div className="overlay" onClick={closePopup}></div>
      )}

      {/* Popup ƒêƒÉng nh·∫≠p */}
      {showLogin && (
        <div className="popup-login login-popup">
          <div className="popup-arrow-login"></div>
          <div className="popup-content">
            <h2>ƒêƒÇNG NH·∫¨P T√ÄI KHO·∫¢N</h2>
            <p>Nh·∫≠p email v√† m·∫≠t kh·∫©u c·ªßa b·∫°n:</p>
            <input
              type="text"
              placeholder="Nh·∫≠p email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
            <input
              type="password"
              placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
            {error && <p className="error-message">{error}</p>}
            <button className="login-btn" onClick={handleLogin}>
              ƒêƒÇNG NH·∫¨P
            </button>
            <p>
              Kh√°ch h√†ng m·ªõi?{" "}
              <Link to="/register" className="link">
                T·∫°o t√†i kho·∫£n
              </Link>
            </p>
            <p>
              Qu√™n m·∫≠t kh·∫©u?{" "}
              <Link to="/reset-password" className="link">
                Kh√¥i ph·ª•c m·∫≠t kh·∫©u
              </Link>
            </p>
            <button className="close-btn" onClick={closePopup}>
              <i className="fa-light fa-xmark"></i>
            </button>
          </div>
        </div>
      )}

      {/* Popup Gi·ªè h√†ng */}
      {showCart && (
        <div className="popup-cart cart-popup">
          <div className="popup-arrow-cart"></div>
          <div className="popup-content">
            <h2>GI·ªé H√ÄNG</h2>
            <i className="fa-light fa-cart-shopping"></i>
            <p className="cart-empty">Hi·ªán ch∆∞a c√≥ s·∫£n ph·∫©m</p>
            <p className="cart-discount">
              B·∫°n ƒë∆∞·ª£c gi·∫£m ƒë·∫øn 10% t·ªëi ƒëa 10K, mua th√™m 699,000‚Ç´ n·ªØa!
            </p>
            <div className="cart-total">
              <p>
                T·∫°m t√≠nh: <b>0‚Ç´</b>
              </p>
              <p>
                Gi·∫£m gi√°: <b>0‚Ç´</b>
              </p>
              <p className="total-amount">
                T·ªïng ti·ªÅn: <b>0‚Ç´</b>
              </p>
            </div>
            <button className="cart-edit" onClick={() => navigate("/cart")}>
              CH·ªàNH S·ª¨A GI·ªé H√ÄNG
            </button>
            <button className="cart-checkout">THANH TO√ÅN</button>
            <button className="close-btn" onClick={closePopup}>
              <i className="fa-light fa-xmark"></i>
            </button>
          </div>
        </div>
      )}
    </header>
  );
}

export default Header;